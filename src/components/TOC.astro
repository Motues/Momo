---
import { siteConfig } from "@/config";
import type { MarkdownHeading } from "astro";

import { i18n } from "astro:config/client";
import i18nit from '@i18n/translation'

interface Props {
	class?: string;
	headings: MarkdownHeading[];
}
const className = Astro.props.class;
const { headings = [] } = Astro.props;

let minDepth = 10;
for (const heading of headings) {
    minDepth = Math.min(minDepth, heading.depth);
}
const maxDepth = minDepth + siteConfig.toc.depth
const filteredHeadings = headings.filter(heading => heading.depth <= maxDepth);

const { locale = i18n!.defaultLocale } = Astro.params;

const currentLang = i18n.locales.includes(locale) ? locale : i18n!.defaultLocale;
const t = i18nit(currentLang);
---

<div aria-labelledby="toc-heading" class=`${className} lg:inline-block text-[var(--text-color)] hidden fixed top-20 w-[var(--toc-width)] left-[var(--toc-offset-left)] opacity-0 transition-opacity duration-300 h-1/2 overflow-hidden` id="toc-container">
	<h2 id="toc-heading" class="text-lg font-bold mb-2">{t("toc")}</h2>
	<ul class="space-y-1 overflow-y-auto h-full pr-2" id="toc-list" style="scrollbar-width: none;">
		{
			filteredHeadings.map((heading) => (
				<li>
					<a
						href={`#${heading.slug}`}
						class:list={["block py-1 text-sm hover:text-[var(--link-color)] transition-colors", {
							'font-medium pl-0': heading.depth == minDepth,
							'pl-4': heading.depth == minDepth + 1,
							'pl-8': heading.depth == minDepth + 2,
							'pl-12': heading.depth == minDepth + 3 , 
							'pl-16': heading.depth > minDepth + 3
                        }]}
						data-heading-slug={heading.slug}
						id={`toc-link-${heading.slug}`}
					>
						{heading.text}
					</a>
				</li>
			))
		}
	</ul>
</div>

<script define:vars={{ filteredHeadings }} is:inline>
if (typeof window !== 'undefined') {
  function initTOC() {
    let tocVisible = false;
    const headerCoverHeight = 200;
    let activeHeadings = new Array(filteredHeadings.length).fill(false);

    const tocContainer = document.getElementById('toc-container');
    const tocList = document.getElementById('toc-list');

    const handleScroll = () => {
      const scrollY = window.scrollY || window.pageYOffset;

      if (scrollY > headerCoverHeight && !tocVisible && tocContainer) {
        tocContainer.classList.remove('opacity-0');
        tocContainer.classList.add('opacity-100');
        tocVisible = true;
      } else if (scrollY <= headerCoverHeight && tocVisible && tocContainer) {
        tocContainer.classList.remove('opacity-100');
        tocContainer.classList.add('opacity-0');
        tocVisible = false;
      }
    };

    const updateTOCItemsStyle = () => {
      const tocLinks = Array.from(document.querySelectorAll('a[data-heading-slug]'));
      const linksCount = tocLinks.length;

      let minActiveIndex = linksCount;
      let maxActiveIndex = 0;

      for (let i = 0; i < linksCount; i++) {
        if (activeHeadings[i]) {
          minActiveIndex = Math.min(minActiveIndex, i);
          maxActiveIndex = Math.max(maxActiveIndex, i);
        }
      }

      const midActiveIndex = Math.floor((minActiveIndex + maxActiveIndex) / 2);

      for (let i = 0; i < linksCount; i++) {
        const distance = Math.abs(i - midActiveIndex);
        let opacity, fontWeight;
        if (distance === 0) {
          opacity = 1;
          fontWeight = '700';
        } else if (distance === 1) {
          opacity = 0.9;
          fontWeight = '600';
        } else if (distance <= 5) {
          opacity = 1 - (distance - 1) * 0.2;
          fontWeight = distance === 2 ? '500' : '400';
        } else {
          opacity = 0.1;
          fontWeight = '300';
        }
        tocLinks[i].style.opacity = opacity;
        tocLinks[i].style.fontWeight = fontWeight;
      }
    };

    const detectActiveHeadings = () => {
      const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const slug = entry.target.id;
          const tocLink = document.querySelector(`a[data-heading-slug="${slug}"]`);
          const headingIndex = filteredHeadings.findIndex(heading => heading.slug === slug);

          if (entry.isIntersecting) {
            if (headingIndex !== -1) activeHeadings[headingIndex] = true;
            if (tocLink) {
              tocLink.classList.add('active');
              const containerHeight = tocList.clientHeight;
              const linkOffsetTop = tocLink.offsetTop;
              const scrollTo = linkOffsetTop - containerHeight / 2;
              tocList.scrollTo({ top: scrollTo, behavior: 'smooth' });
            }
          } else {
            if (headingIndex !== -1) activeHeadings[headingIndex] = false;
            tocLink?.classList.remove('active');
          }
        });
        updateTOCItemsStyle();
      }, observerOptions);

      filteredHeadings.forEach(heading => {
        const headingElement = document.getElementById(heading.slug);
        if (headingElement) observer.observe(headingElement);
      });
    };

    const setupSmoothScrolling = () => {
      const tocLinks = document.querySelectorAll('a[href^="#"]');
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            history.pushState(null, '', `#${targetId}`);
          }
        });
      });
    };

    // 清理旧监听器（防止多次绑定）
    window.removeEventListener('scroll', handleScroll);
    window.removeEventListener('resize', handleScroll);

    window.addEventListener('scroll', handleScroll);
    window.addEventListener('resize', handleScroll);
    handleScroll();

    setupSmoothScrolling();
    detectActiveHeadings();
  }

  // 页面初次加载 & 每次 ClientRouter 导航后重新初始化
  document.addEventListener('astro:page-load', initTOC);
  document.addEventListener('astro:after-swap', initTOC);
}
</script>

<style>
/* Add hover effect to TOC links */
#toc-list a:hover {
  opacity: 1 !important;
  font-weight: 600 !important;
  transition: opacity 0.2s ease-in-out;
}
</style>