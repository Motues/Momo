---
import "@styles/global.css"
import { Icon } from "astro-icon/components"
import { profileConfig, siteConfig } from "@/config"
import ThemeIcon from "./control/ThemeIcon.astro"
import { baseUrl } from "@utils/url-utils"

import { i18n } from "astro:config/client";
import i18nit from '@i18n/translation'
import { getRelativeLocaleUrl } from '@utils/url-utils';


// 获取当前页面在不同语言下的路径
const getLocalePath = (path: string, targetLocale: string) => {
  const currentPath = Astro.url.pathname;
  const defaultLocale = i18n?.defaultLocale || "zh-cn";
  
  // 移除当前语言前缀
  let basePath = currentPath;
  if (locale && locale !== defaultLocale) {
    basePath = currentPath.replace(`/${locale}`, "") || "/";
  }
  
  // 添加目标语言前缀（默认语言不需要前缀）
  if (targetLocale && targetLocale !== defaultLocale) {
    return `/${targetLocale}${basePath}`;
  }
  
  return basePath;
};


const { locale = i18n!.defaultLocale } = Astro.params;

const currentLang = locale;
const t = i18nit(currentLang);

const indexPage = getRelativeLocaleUrl(currentLang, "/");
const archivesPage = getRelativeLocaleUrl(currentLang, "/archives");
const friendsPage = getRelativeLocaleUrl(currentLang, "/friends");
const aboutPage = getRelativeLocaleUrl(currentLang, "/about");
---

<!-- header -->
<div class="flex items-center p-4 text-[var(--text-color)] max-w-[min(1024px,90vw)] mx-auto">
    <!-- logo -->
    <div class="px-4 py-2 font-bold z-30">
        <a href={ indexPage } >
            <span class="text-lg font-bold hover:opacity-60 transition-opacity">{ siteConfig.title }</span>
        </a>
    </div>
    <!-- nav_bar -->
    <div id="nav-bar" class="hidden md:flex absolute left-1/2 transform -translate-x-1/2 justify-center items-center text-lg font-bold">
        <div id="nav-bar-list" class="transition relative z-10 flex max-w-max flex-1 items-center justify-center rounded-outer p-2 backdrop-blur rounded-xl bg-[color:var(--bg-color)]/20">
            <a href={ indexPage } class="transition-colors hover:bg-[var(--button-hover-color)] rounded-lg px-3 py-1 mx-1 hover:text-current">{t("header.home")}</a>
            <a href={ archivesPage } class="transition-colors hover:bg-[var(--button-hover-color)] rounded-lg px-3 py-1 mx-1 hover:text-current">{t("header.archive")}</a>
            <a href={ aboutPage } class="transition-colors hover:bg-[var(--button-hover-color)] rounded-lg px-3 py-1 mx-1 hover:text-current">{t("header.about")}</a>
            <a href={ friendsPage } class="transition-colors hover:bg-[var(--button-hover-color)] rounded-lg px-3 py-1 mx-1 hover:text-current">{t("header.friends")}</a>
        </div>
    </div>
    
    <!-- tools -->
    <div class="ml-auto flex gap-2 px-4 py-2 justify-end z-30">
        <!-- Search -->
        <button id="search-button" class="flex items-center justify-center w-10 h-10 hover:bg-[var(--button-hover-color)] active:scale-90 rounded-lg hover:text-current border border-[var(--button-border-color)] transition-all duration-300">
            <Icon name="fa6-solid:magnifying-glass" class="w-4 h-4" />
        </button>
        <!-- Dark Mode -->
        <ThemeIcon class="flex items-center justify-center w-10 h-10 hover:bg-[var(--button-hover-color)] rounded-lg hover:text-current active:scale-90 border border-[var(--button-border-color)] transition-all duration-300"/>
        <!-- RSS -->
        <!-- <a href="/rss.xml" target="_blank" class="flex items-center justify-center w-10 h-10 hover:bg-[var(--button-hover-color)] active:scale-90 rounded-lg hover:text-current border border-[var(--button-border-color)] transition-all duration-300">
            <Icon name="simple-icons:rss" class="w-4 h-4" />
        </a> -->
        <!-- Language Switcher -->
        <div class="relative">
            <button id="language-button" class="flex items-center justify-center w-10 h-10 hover:bg-[var(--button-hover-color)] active:scale-90 rounded-lg hover:text-current border border-[var(--button-border-color)] transition-all duration-300">
                <Icon name="fa6-solid:globe" class="w-4 h-4" />
            </button>
            
            <!-- Language Dropdown Menu -->
            <div id="language-menu" class="hidden absolute right-0 mt-2 w-30 bg-[var(--bg-color)] border border-[var(--button-border-color)] rounded-lg shadow-lg z-50">
                <div class="py-1">
                    <!-- 中文链接 -->
                    <a href={getLocalePath("/", "zh-cn")} class="block px-4 py-2 text-sm hover:bg-[var(--button-hover-color)]">简体中文</a>
                    <!-- 英文链接 -->
                    <a href={getLocalePath("/", "en")} class="block px-4 py-2 text-sm hover:bg-[var(--button-hover-color)]">English</a>
                </div>
            </div>
        </div>
        <!-- Mobile Menu -->
        <button id="mobile-menu-button" class="focus:outline-none md:hidden flex items-center justify-center w-10 h-10 hover:bg-[var(--button-hover-color)] rounded-lg cursor-pointer  border border-[var(--button-border-color)] transition-all duration-300">
            <Icon name="fa6-solid:align-justify" class="w-5 h-5" />
        </button>
    </div>
</div>

<!-- Mobile Menu -->
<div id="mobile-menu" class="md:hidden hidden fixed top-16 left-0 w-full bg-[var(--bg-color)] text-[var(--text-color)] shadow-lg z-50">
    <div class="flex flex-col py-2">
        <a href={ indexPage } class="px-6 py-3 hover:bg-[var(--button-hover-color)]">{t("header.home")}</a>
        <a href={ archivesPage }  class="px-6 py-3 hover:bg-[var(--button-hover-color)]">{t("header.archive")}</a>
        <a href={ aboutPage }  class="px-6 py-3 hover:bg-[var(--button-hover-color)]">{t("header.about")}</a>
        <a href={ friendsPage } class="px-6 py-3 hover:bg-[var(--button-hover-color)]">{t("header.friends")}</a>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const menuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const navBar = document.getElementById('nav-bar');
        const navBarList = document.getElementById('nav-bar-list');
        const searchButton = document.getElementById('search-button');
        
        
        if (menuButton && mobileMenu) {
            menuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
            
            // 点击菜单外部区域关闭菜单
            document.addEventListener('click', (event) => {
                if (!menuButton.contains(event.target as Node) && !mobileMenu.contains(event.target as Node)) {
                    mobileMenu.classList.add('hidden');
                }
            });
        }
        
        // 监听滚动事件
        let isFixed = false;
        window.addEventListener('scroll', () => {
            if (window.scrollY > 0 && !isFixed && navBar && navBarList) {
                // 页面不在顶部，添加fixed类
                navBar.classList.add('fixed', 'top-4', 'z-20',);
                navBarList.classList.add('border' ,'border-[var(--button-border-color)]', 'shadow-[0_4px_12px_var(--shadow-color)]');
                isFixed = true;
            } else if (window.scrollY === 0 && isFixed && navBar && navBarList) {
                // 页面回到顶部，移除fixed类
                navBar.classList.remove('fixed', 'top-4', 'z-20', );
                navBarList.classList.remove('border' ,'border-[var(--button-border-color)]','shadow-[0_4px_12px_var(--shadow-color)]');
                isFixed = false;
            }
        });
    });
</script>
<script>
// 添加到现有 script 标签中
const languageButton = document.getElementById('language-button');
const languageMenu = document.getElementById('language-menu');

if (languageButton && languageMenu) {
    languageButton.addEventListener('click', () => {
        languageMenu.classList.toggle('hidden');
    });
    
    // 点击菜单外部区域关闭菜单
    document.addEventListener('click', (event) => {
        if (!languageButton.contains(event.target as Node) && !languageMenu.contains(event.target as Node)) {
            languageMenu.classList.add('hidden');
        }
    });
}
</script>

{
import.meta.env.PROD && 
<script is:inline define:vars={{scriptUrl: baseUrl('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    try {
        const response = await fetch(scriptUrl, { method: 'HEAD' });
        if (!response.ok) {
            throw new Error(`Pagefind script not found: ${response.status}`);
        }

        const pagefind = await import(scriptUrl);

        await pagefind.options({
            excerptLength: 20
        });

        window.pagefind = pagefind;

        document.dispatchEvent(new CustomEvent('pagefindready'));
        // console.log('Pagefind loaded and initialized successfully, event dispatched.');
    } catch (error) {
        console.error('Failed to load Pagefind:', error);
        window.pagefind = {
            search: () => Promise.resolve({ results: [] }),
            options: () => Promise.resolve(),
        };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
        // console.log('Pagefind load error, event dispatched.');
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>
}